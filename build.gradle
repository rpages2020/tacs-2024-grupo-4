import org.springframework.boot.gradle.tasks.bundling.BootJar
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'groovy'
	id 'jacoco'
	id 'checkstyle'
}

group = 'tac'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '23'
	toolchain {
		languageVersion = JavaLanguageVersion.of(23)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

checkstyle {
	configFile = file("$rootDir/checkstyle/checkstyle.xml")
	toolVersion = '10.12.2'
}

copy {
	from 'hooks/pre-commit','hooks/pre-push'
	into '.git/hooks'
	fileMode 0777
}

dependencies {

	// logs
	implementation 'org.apache.commons:commons-text:1.11.0'

	//Spring
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//Mapper
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	//DB
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	//Lombok
	compileOnly 'org.projectlombok:lombok:1.18.34'
	annotationProcessor 'org.projectlombok:lombok:1.18.34'
	testCompileOnly 'org.projectlombok:lombok:1.18.34'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'


	//Testing
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mock-server:mockserver-junit-jupiter:5.15.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.apache.groovy:groovy:4.0.22'
	testImplementation 'org.apache.groovy:groovy-json:4.0.22'
	testImplementation 'org.apache.groovy:groovy-xml:4.0.22'
	testImplementation 'org.spockframework:spock-core:2.4-M4-groovy-4.0'
	testImplementation 'org.spockframework:spock-spring:2.4-M4-groovy-4.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.0'

	testImplementation('com.athaydes:spock-reports:2.5.1-groovy-4.0') {
		transitive = false
	}
	testImplementation('org.testcontainers:mysql')

	//Telegram API
	implementation 'org.telegram:telegrambots:6.5.0'
	//WebFlux
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// Documentacion con swagger
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.16'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'

	// Mockito para crear mocks
	testImplementation 'org.mockito:mockito-core:3.12.4'

	// (Opcional) Mockito con JUnit para integraci√≥n fluida
	testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'

}

test {
	useJUnitPlatform()
	systemProperty "file.encoding", "utf-8"
	finalizedBy jacocoTestReport, jacocoTestCoverageVerification
	maxParallelForks = Runtime.runtime.availableProcessors()
}
jacocoTestReport {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: [

					"tp_tac/grupo_4/entities/**",
					"tp_tac/grupo_4/dtos/**",
					"tp_tac/grupo_4/exceptions/**",
					"tp_tac/grupo_4/mappers/**",
					"tp_tac/grupo_4/Grupo4Application*"
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			excludes = [
					'tp-tac.grupo_4.configuration.*',
					'tp-tac.grupo_4.controller.*',
					'tp-tac.grupo_4.enums.*',
					'tp-tac.grupo_4.dto.*',
					'tp-tac.grupo_4.Grupo4Application',
			]
			element = 'CLASS'
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}
		}
	}
}
check {
	dependsOn jacocoTestCoverageVerification
}

tasks.register('bootJarApi', BootJar) {
	targetJavaVersion.set(JavaVersion.VERSION_23)
	archiveBaseName = 'api-boot'
	mainClass = 'tacs.grupo_4.Grupo4Application'
	classpath = sourceSets.main.runtimeClasspath
}
tasks.register('bootJarBot', BootJar) {
	targetJavaVersion.set(JavaVersion.VERSION_23)
	archiveBaseName = 'bot-boot'
	mainClass = 'tacs.grupo_4.BotApplication'
	classpath = sourceSets.main.runtimeClasspath
}
task buildAll{
	dependsOn bootJarApi, bootJarBot
}